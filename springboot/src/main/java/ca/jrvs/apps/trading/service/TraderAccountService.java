package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.model.view.TraderAccountView;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

@Service
public class TraderAccountService {

  private static final Logger logger = LoggerFactory.getLogger(TraderAccountService.class);

  private TraderDao traderDao;
  private AccountDao accountDao;
  private SecurityOrderDao securityOrderDao;
  private PositionDao positionDao;

  @Autowired
  public TraderAccountService(TraderDao traderDao, AccountDao accountDao,
      SecurityOrderDao securityOrderDao, PositionDao positionDao) {
    this.traderDao = traderDao;
    this.accountDao = accountDao;
    this.securityOrderDao = securityOrderDao;
    this.positionDao = positionDao;
  }

  /**
   * Create a new trader and initialize a new account with 0 amount
   * - validate user input (all fields non empty)
   * - create a trader
   * - create an account
   * - create, setup and return a new traderAccountView
   *
   * assumption: each trader has only one account where traderId == accountId
   *
   * @param trader cannot be null. all fields can not be null except for the id (auto-generated by db)
   * @return traderAccountView
   * @throws IllegalArgumentException if a trader has null fields or id is not null
   */
  public TraderAccountView createTraderAndAccount(Trader trader) {
    if (trader.getId() != null)
      throw new IllegalArgumentException("Id is not allowed.");

    if (trader.getFirstName() == null || trader.getFirstName().isEmpty() ||
        trader.getLastName() == null || trader.getLastName().isEmpty() ||
        trader.getCountry() == null || trader.getCountry().isEmpty() ||
        trader.getEmail() == null || trader.getEmail().isEmpty() ||
        trader.getDob() == null)
      throw new IllegalArgumentException("Trader and its properties cannot be null or empty.");

    traderDao.save(trader);

    Account account = new Account();
    account.setTraderId(trader.getId());
    account.setAmount(0.0d);
    accountDao.save(account);

    TraderAccountView traderAccountView = new TraderAccountView();
    traderAccountView.setAccount(account);
    traderAccountView.setTrader(trader);

    return traderAccountView;
  }

  /**
   * A trader can be deleted if it has no open position and 0 cash balance
   * - validate traderId
   * - get trader account by traderId and check account balance
   * - get positions by accountId and check positions
   * - delete all securityOrders, account and trader
   *
   * @param traderId not null
   * @throws IllegalArgumentException if traderId is null or not found or unable to delete
   */
  public void deleteTraderById(Integer traderId) {

    if(traderId == null || !traderDao.findById(traderId).isPresent())
      throw new IllegalArgumentException("Invalid TraderId.");

    if (accountDao.findById(traderId).get().getAmount() != 0)
      throw new IllegalArgumentException("Non-zero account balance. Can't delete trader.");

    if (positionDao.findByAccountId(traderId)
        .stream().anyMatch(position -> position.getSum() > 0))
      throw new IllegalArgumentException("Trader has open positions. Can't delete trader.");


    securityOrderDao.deleteById(traderId);
    accountDao.deleteById(traderId);
    traderDao.deleteById(traderId);
  }

  /**
   * Deposit a fund to an account by traderId
   * - validate user input
   * - account = accountDao.findByTraderId
   * - accountDao.updateAmountById
   *
   * @param traderId not null
   * @param fund > 0
   * @return updated account
   * @throws IllegalArgumentException if traderId is null or not found, and fund <= 0
   */
  public Account deposit(Integer traderId, Double fund) {

    if(traderId == null || !traderDao.findById(traderId).isPresent() || fund <= 0)
      throw new IllegalArgumentException("Invalid traderId/fund.");

    Account account = accountDao.findById(traderId).get();
    account.setAmount(account.getAmount() + fund);
    accountDao.save(account);

    return account;
  }

  /**
   * Withdraw a fund to an account by trader Id
   * - validate user input
   * - account = accountDao.findByTraderId
   * - accountDao.updateAmountById
   *
   * @param traderId
   * @param fund != 0
   * @return updated account
   * @throws IllegalArgumentException if traderId is null or not found, fund <= 0
   *                                  , insufficient fund
   */
  public Account withdraw(Integer traderId, Double fund) {

    if(traderId == null || !traderDao.findById(traderId).isPresent() || fund <= 0)
      throw new IllegalArgumentException("Invalid traderId/fund.");

    Account account = accountDao.findById(traderId).get();

    if (account.getAmount() - fund < 0)
      throw new IllegalArgumentException("Insufficient account balance.");

    account.setAmount(account.getAmount() - fund);
    accountDao.save(account);

    return account;
  }
}
